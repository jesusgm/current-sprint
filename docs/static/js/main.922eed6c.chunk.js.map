{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","result","d","Date","UTC","getFullYear","getMonth","getDate","setUTCDate","getUTCDate","getUTCDay","yearStart","getUTCFullYear","weekNo","Math","ceil","slice","getWeekNumber","sprint","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLA8BeA,MA3Bf,WAgBE,IAAIC,EAdJ,SAAuBC,IAEnBA,EAAI,IAAIC,KAAKA,KAAKC,IAAIF,EAAEG,cAAeH,EAAEI,WAAYJ,EAAEK,aAGrDC,WAAWN,EAAEO,aAAe,GAAKP,EAAEQ,aAAa,IAElD,IAAIC,EAAY,IAAIR,KAAKA,KAAKC,IAAIF,EAAEU,iBAAiB,EAAE,IAEnDC,EAASC,KAAKC,OAAUb,EAAIS,GAAa,MAAY,GAAG,GAE5D,MAAO,CAAC,UAAGT,EAAEG,eAAgBW,MAAM,GAAIH,GAG9BI,CAAc,IAAId,MAEzBe,EAAM,UAAMjB,EAAO,GAAb,YAAmBA,EAAO,GAAG,IAAI,EAAIA,EAAO,GAAIA,EAAO,GAAG,GAEtE,OACE,qBAAKkB,UAAU,MAAf,SACC,6BAAKD,OCbKE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.922eed6c.chunk.js","sourcesContent":["\nimport './App.css';\n\nfunction App() {\n\n  function getWeekNumber(d) {\n      // Copy date so don't modify original\n      d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));\n      // Set to nearest Thursday: current date + 4 - current day number\n      // Make Sunday's day number 7\n      d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay()||7));\n      // Get first day of year\n      var yearStart = new Date(Date.UTC(d.getUTCFullYear(),0,1));\n      // Calculate full weeks to nearest Thursday\n      var weekNo = Math.ceil(( ( (d - yearStart) / 86400000) + 1)/7);\n      // Return array of year and week number\n      return [`${d.getFullYear()}`.slice(2), weekNo];\n  }\n\n  var result = getWeekNumber(new Date());\n  \n  const sprint = `${result[0]}_${result[1]%2===0 ? result[1]: result[1]+1}`;\n\n  return (\n    <div className=\"App\">\n     <h1>{sprint}</h1>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}